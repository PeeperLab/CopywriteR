bam_list <- list.files(path ="~/Downloads/CNAprofiles_pipeline/CNAprofiles/relative_mapa.2_ratios20000", pattern = ".bam")
bam_list
whichControl <- c(1,2,1,2)
control_list <- as.factor(bam_list[whichControl])
control_list
attributes(control_list)
as.numeric(levels())
as.numeric(levels(control_list))
levels(control_list)
as.numeric(levels(control_list))[control_list]
as.numeric(levels(control_list))[q]
as.numeric(levels(control_list))[1]
as.vector(levels(control_list))
unclass(control_list)
attributes(unclass(control_list))
x <- unclass(control_listx)
x <- unclass(control_list)
x
x[1]
attributes[x]
attributes(x)
attributes(x) <- NULL
x
(attributes(unclass(control_list)) <- NULL)
attributes(unclass(control_list)) <- NULL
unclass(control_list)
attributes(unclass(control_list))[1]
attributes(unclass(control_list))[0]
unclass(control_list)
as.numeric(unclass(control_list))
bam_list
control_list <- as.factor(bam_list[whichControl]) ######
	bamControlList <- cbind(BamName <- bam_list, ControlName <- control_list, Index <- as.numeric(unclass(control_list)))
bamControlList
control_list <- as.factor(bam_list[whichControl])
control_list
control_list <- as.factor(bam_list[whichControl])
control_list <- as.factor(bam_list[whichControl]) ######
	bamControlList <- cbind(BamName = bam_list, ControlName = control_list, Index = as.numeric(unclass(control_list)))
bamControlList
control_list
cbind(control_list, control_list)
control_list <- bam_list[whichControl] ######
	bamControlList <- cbind(BamName = bam_list, ControlName = control_list, Index = as.numeric(unclass(as.factor(control_list))))
bamControlList
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$controlName[i], "\n")#
	}
bamControlList$bamName
class(bamControlList)
control_list <- bam_list[whichControl] ######
	bamControlList <- as.data.frame(cbind(bamName = bam_list, controlName = control_list, index = as.numeric(unclass(as.factor(control_list)))))
head(bamControlList)
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$controlName[i], "\n") ######
	}
control_list <- bam_list[whichControl] ######
	bamControlList <- as.data.frame(cbind(bamName = bam_list, controlName = control_list#
		, index = as.numeric(unclass(as.factor(control_list)))), stringsAsFactors = FALSE)
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$controlName[i], "\n") ######
	}
control_list <- bam_list[whichControl] ######
	bamControlList <- as.data.frame(cbind(bamName = bam_list, controlName = control_list, index = whichControl), stringsAsFactors = FALSE)
bamControlList
control_list <- bam_list[whichControl] ######
	bamControlList <- as.data.frame(cbind(bamName = bam_list, controlName = control_list, index = whichControl), stringsAsFactors = FALSE) ######
	bamControlList <- gsub(".bam.*", "", bamControlList)
bamControlList
control_list <- bam_list[whichControl] ######
	bamControlList <- as.data.frame(cbind(bamName = gsub(".bam.*", "", bam_list), controlName = control_list, index = whichControl), stringsAsFactors = FALSE)
bamControlList
bamControlList <- as.data.frame(cbind(bamName = gsub(".bam.*", "", bam_list), index = whichControl), stringsAsFactors = FALSE)
bamControlList
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$bamName[bamControlList$index[i]], "\n") ######
	}
class(bamControlList$index[1])
class(whichControl)
bamControlList <- as.data.frame(cbind(bamName = gsub(".bam.*", "", bam_list), index = as.numeric(whichControl)), stringsAsFactors = FALSE)
class(bamControlList$index[1])
bamControlList <- data.frame(bamName = gsub(".bam.*", "", bam_list), index = whichControl)
class(bamControlList$index[1])
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$bamName[bamControlList$index[i]], "\n") ######
	}
class(bamControlList$index)
bamControlList <- data.frame(bamName = gsub(".bam.*", "", bam_list), index = whichControl, stringsAsFactors = FALSE)
class(bamControlList$index[1])
for(i in 1:length(bam_list)) {#
		cat("The control for sample", bamControlList$bamName[i], "will be", bamControlList$bamName[bamControlList$index[i]], "\n") ######
	}
nrow(bamControlList)
library(snowfall)
bam_list <- c("bam1", "bam2", "bam3", "bam4")
control_list <- c(1,2,1,2)
i <- 1:length(bam_list)#
	macs14 <- function(i, bam_list , control_list) {#
		system(paste0("macs14 -t " , bam_list[i], " -n MACS", control_list[i], " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[i], " -n MACS", control_list[i], " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(bam_list), ncpu))#
	toLog <- sfLapply(i, macs14, bam_list, control_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
ncpu = 4
i <- 1:length(bam_list)#
	macs14 <- function(i, bam_list , control_list) {#
		paste0("macs14 -t " , bam_list[i], " -n MACS", control_list[i], " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(bam_list), ncpu))#
	toLog <- sfLapply(i, macs14, bam_list, control_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
library(GenomicRanges)
??GenomicRanges
gr <- GRanges(#
        seqnames=Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),#
        ranges=IRanges(1:10, end=10),#
        strand=Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),#
        seqlengths=c(chr1=11, chr2=12, chr3=13))
gr
coverage(gr)
cvg <- coverage(gr)#
pcvg <- coverage(gr[strand(gr) == "+"])#
mcvg <- coverage(gr[strand(gr) == "-"])#
scvg <- coverage(gr[strand(gr) == "*"])#
stopifnot(identical(pcvg + mcvg + scvg, cvg))
cvg
pcvg
GenomicRanges::map
?GenomicRanges::map
x <- data.frame(c(1,2,3,4,5,6), ncol =3)
x
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)
x
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)
x
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")
x
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, start, width = 1))
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start)))
x.range
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))
x.range
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2001), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))
x.range
y.range
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))
x.range
y.range
findOverlaps(x.range, y.range)
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(queryHits(ov), subjectHits(ov))
ov
dt
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(queryHits(ov), subjectHits(ov))#
colnames(dt) <- c("ov.x.range", "ov.y.range")#
dt <- dt[,lapply(.SD, mean), by = c("ov.y.range")]
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(queryHits(ov), subjectHits(ov))
colnames(dt)
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(queryHits(ov), subjectHits(ov))#
setnames(colnames(dt), c("V1", "V2"), c("ov.x.range", "ov.y.range"))
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(queryHits(ov), subjectHits(ov))#
setnames(dt, c("V1", "V2"), c("ov.x.range", "ov.y.range"))
dt
dt <- dt[,lapply(.SD, mean), by = c("ov.y.range")]
dt
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))
x.range
y.range
ov <- findOverlaps(x.range, y.range)
ov
mapability(x.range)
mcol(x.range)
x.range
metadata(x.range)
metadata(x.range)[[1]]
str(x.range)
ranges(x.range)
metadata(x.range)
elementMetadata(x.range)
class(elementMetadata(x.range))
mapability(elementMetadata(x.range))
elementMetadata(x.range)
elementMetadata(x.range)[1]
elementMetadata(x.range)$mapability
dt <- data.table(elementMetadata(x.range)$mapability[queryHits(ov)], subjectHits(ov))
dt
x.range
ov
y.range
setnames(dt, c("V1", "V2"), c("ov.x.range", "ov.y.range"))
library(GenomicRanges)#
library(data.table)#
#
x <- matrix(c(1,1,1,1,1,550,750,1000,1500,2002), ncol = 2)#
x <- as.data.frame(x)#
colnames(x) <- c("chr", "start")#
x.range <- with(x, GRanges(chr, IRanges(start, start), mapability = c(1,0,1,0,1)))#
#
y <- matrix(c(1,1,1,1,1001,3001), ncol = 2)#
y <- as.data.frame(y)#
colnames(y) <- c("chr", "start")#
y.range <- with(y, GRanges(chr, IRanges(start, start + 1000)))#
#
# Calculate overlap#
ov <- findOverlaps(x.range, y.range)#
dt <- data.table(elementMetadata(x.range)$mapability[queryHits(ov)], subjectHits(ov))#
setnames(dt, c("V1", "V2"), c("mapability.x.range", "ov.y.range"))
dt
dt <- dt[,lapply(.SD, mean), by = c("ov.y.range")]
dt
??findOverlaps
?GenomicRanges
??GenomicRanges
intersect(x.range,y.range)
y.range
seqnames(y.range)
str(y.range)
ranges(y.range)
ranges(y.range)[1,2]
class(ranges(y.range))
ranges(y.range)$start
ranges@start(y.range)
y.range@ranges@start
bed <- cbind(seqnames(y.range), y.range@ranges@start, y.range@ranges@stop)
y.range
seqnames(y.range)
bed <- cbind(seqnames(y.range), seqnames(y.range))
bed
control_list <- c(1,2,1,2)
bam_list <- c("bam1", "bam2", "bam3", "bam4")
library(snowfall)
ncpu = 4
controlNumbers <- unique(control_list) ######
	# Call peaks in .bam file of control sample#
	i <- c(1:length(controlNumbers))	#
	macs14 <- function(i, controlNumbers, bam_list) {#
		system(paste0("macs14 -t " , bam_list[controlNumbers[i]], " -n MACS", controlNumbers[i], " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[controlNumbers[i]], " -n MACS", controlNumbers[i], " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(controlNumbers), inputStructure$ncpu))#
	toLog <- sfLapply(i, macs14, controlNumbers, bam_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
i
# Call peaks in .bam file of control sample#
	macs14 <- function(controlNumbers, bam_list) {#
		system(paste0("macs14 -t " , bam_list[controlNumbers[i]], " -n MACS", controlNumbers[i], " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[controlNumbers[i]], " -n MACS", controlNumbers[i], " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(controlNumbers), inputStructure$ncpu))#
	toLog <- sfLapply(controlNumbers , macs14, bam_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
# Call peaks in .bam file of control sample#
	macs14 <- function(controlNumbers, bam_list) {#
		system(paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(controlNumbers), inputStructure$ncpu))#
	toLog <- sfLapply(controlNumbers , macs14, bam_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
bam_list
control_list
control_list <- c(1,2,3,1)
# Create list with numbers of controls#
	controlNumbers <- unique(control_list) ######
	# Call peaks in .bam file of control sample#
	macs14 <- function(controlNumbers, bam_list) {#
		system(paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(controlNumbers), inputStructure$ncpu))#
	toLog <- sfLapply(controlNumbers , macs14, bam_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
control_list <- c(1,2,4,1)
# Create list with numbers of controls#
	controlNumbers <- unique(control_list) ######
	# Call peaks in .bam file of control sample#
	macs14 <- function(controlNumbers, bam_list) {#
		system(paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda"))#
		paste0("macs14 -t " , bam_list[controlNumbers], " -n MACS", controlNumbers, " -g hs --nolambda")#
	}#
	sfInit(parallel=TRUE, cpus = min(length(controlNumbers), inputStructure$ncpu))#
	toLog <- sfLapply(controlNumbers , macs14, bam_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
# Remove peak-regions from .bam files#
	peakrm <- function(bam_list, control_list) {#
		paste0("bedtools intersect -abam ", bam_list, " -b MACS", control_list, "_peaks.bed -v > ", gsub(".bam$", "_peakrm.bam", bam_list))#
	}#
	sfInit(parallel=TRUE, cpus = ncpu)#
	toLog <- sfSapply(bam_list, peakrm, control_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
i <- 1:length(bam_list)
i
# Remove peak-regions from .bam files#
	i <- 1:length(bam_list)#
	peakrm <- function(i, bam_list, control_list) {#
		system(paste0("bedtools intersect -abam ", bam_list[i], " -b MACS", control_list[i], "_peaks.bed -v > ", gsub(".bam$", "_peakrm.bam", bam_list[i])))#
		paste0("bedtools intersect -abam ", bam_list[i], " -b MACS", control_list[i], "_peaks.bed -v > ", gsub(".bam$", "_peakrm.bam", bam_list[i]))#
	}#
	sfInit(parallel=TRUE, cpus = ncpu)#
	toLog <- sfSapply(i, peakrm, bam_list, control_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
# Remove peak-regions from .bam files#
	i <- 1:length(bam_list)#
	peakrm <- function(i, bam_list, control_list) {#
		paste0("bedtools intersect -abam ", bam_list[i], " -b MACS", control_list[i], "_peaks.bed -v > ", gsub(".bam$", "_peakrm.bam", bam_list[i]))#
	}#
	sfInit(parallel=TRUE, cpus = ncpu)#
	toLog <- sfSapply(i, peakrm, bam_list, control_list)#
	sfStop()#
	cat(unlist(toLog), "\n", sep = "\n")
test <- list(c(1,2), c(3,4))
test
unlist(test)
matrix(unlist(test), ncol = 2)
?is.integer
prefixes <- vector(mode = "character")
?all.equal
x <- FALSE
if(x)
print x
if(x) print x
!x
x <- "chr"
!x
bed <- NULL
bed[,1] <- c(1,2,3)
bed[,1] <- matrix(c(1,2,3,4), ncol = 2)
bed <- matrix(c(1,2,3,4), ncol = 2)
bed
prefix <- "chr"
bed[,1] <- paste0(prefix, bed[,1])
bed
bed <- matrix(c(1,2,3,4), ncol = 2)
prefix <- ""
bed[,1] <- paste0(prefix, bed[,1])
bed
x <- c(1:22, "X", "Y", "Z")
x
y <- paste0("chr", x)
y
gsub(c(1:22, "X", "Y"), "", fixed = FALSE)
gsub(c(1:22, "X", "Y"), "", x, fixed = FALSE)
x <- c(1:22, "X", "Y", "Z")
y <- paste0("chr", x[1:24])
y
prefixes <- x
prefixes <- y
intersect(prefixes)
setdiff(x, y)
setdiff(y, x)
setequal(x,y)
union(x,y)
intersect(x,y)
library(Biostrings)
lcprefix(x,y)
lcprefix(x)
lcprefix(x[1], x[2])
x
lcprefix(y[1], y[2])
y
lcsubstr(y[1], y[2])
y <- paste0("chromosome", x[1:24])
lcsubstr(y[1], y[2])
lcprefix(y[1], y[2])
y
gsub(c(1:22, "X", "Y"), "", y)
gsub("[[:digit:]]", "", y)
gsub("[[:digit:X:Y:]]", "", y)
gsub("[[:digit:]]|X|Y", "", y)
??readLines
bam_list <- c("bam1", "bam2")
c(bam_list, "hoi")
windowBedFile <- "~/Downloads/protein-coding_gene.txt"
readLines(con <- file(windowBedFile), n=5)
load("/Users/t.kuilman/git/ENCODER/ENCODER 3/build/vignette.rds")
